// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}

.topbar {
  height: 160px;
  width: 100%;
  position: absolute;
  background-color: white;
  border-bottom: 1px solid color($colors, primary);
  transition: all 0.4s ease-in-out;
  z-index: 1;
  justify-content: center;
  display: flex;
  .container {
    // max-width: 1076px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    width: 100%;
    > div {
      width: 100%;
      transition: all 0.4s ease-in-out;
    }
  }
  .auth {
    display: flex;
    justify-content: flex-end;
    font-size: 12px;
    font-weight: 400;
    font-family: sans-serif;

    padding: 10px;
  }
  .buttons {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    height: 80px;
    padding: 10px;
    .logo {
      display: flex;
      justify-content: center;
      width: 130px;
      height: 75px;
      transition: all 0.4s ease-in-out;
    }
    span {
      font-style: italic;
      // display: flex;
      // height: 20px;
      // align-items: flex-end;
      // padding-right: 10px;
    }
  }
  .nav {
    display: flex;
    justify-content: flex-end;
  }
}

.hide-on-scroll.topbar {
  height: 104px;
  .auth {
    padding: 0;
    > span {
      font-size: 0px;
      transition: all 0.4s ease-in-out;
    }
  }
  .buttons {
    height: 60px;
    align-items: center;
    .logo {
      height: 40px;
      width: 80px;
    }
  }
}

.main-app {
  height: calc(100vh - 160px);
  top: auto;
  bottom: 0;
  position: absolute;
  transition: all 0.4s ease-in-out;
}

.main-app.hide-on-scroll {
  height: calc(100vh - 104px);
}

ion-menu {
  height: calc(100vh - 116px);
  bottom: 0;
  top: auto;
}

@media only screen and (max-width: 768px) {
  .main-app {
    height: calc(100vh - 116px);
  }
  .main-app.hide-on-scroll {
    height: calc(100vh - 60px);
  }
  .hide-on-scroll.topbar {
    height: 60px;
  }
  .topbar {
    height: 116px;
  }
}


@media only screen and (max-width: 576px) {
  .hide-xs {
    display: none !important;
  }
}
@media only screen and (min-width: 576px) and (max-width: 768px) {
  .hide-sm {
    display: none !important;
  }
}
@media only screen and (min-width: 768px) and (max-width: 992px) {
  .hide-md {
    display: none !important;
  }
}
@media only screen and (min-width: 992px) and (max-width: 1200px) {
  .hide-lg {
    display: none !important;
  }
}
@media only screen and (min-width: 1200px) {
  .hide-xl {
    display: none !important;
  }
}

:host /deep/ {
  .popover-content {
    max-width: 600px;
  }
}

.justify-center {
  display: flex;
  justify-content: center;
}
